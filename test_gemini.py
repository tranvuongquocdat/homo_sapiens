import google.generativeai as genai
import time
import os
from typing import Optional

class GeminiSpellChecker:
    def __init__(self, api_key: Optional[str] = None):
        """
        Kh·ªüi t·∫°o Gemini API
        Args:
            api_key: API key cho Gemini. N·∫øu None, s·∫Ω l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY
        """
        if api_key is None:
            api_key = os.getenv('GEMINI_API_KEY')
            if api_key is None:
                raise ValueError("Vui l√≤ng cung c·∫•p API key ho·∫∑c set bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.0-flash')
        
        # Prompt template t·ª´ Flutter app
        self.prompt_template = """B·∫°n l√† m·ªôt bot ki·ªÉm tra ch√≠nh t·∫£ v√† ng·ªØ ph√°p ti·∫øng Vi·ªát. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ch·ªânh s·ª≠a vƒÉn b·∫£n c√≥ l·ªói sai do l·∫∑p ch·ªØ, sai ch√≠nh t·∫£ ho·∫∑c c·∫•u tr√∫c c√¢u ch∆∞a ch√≠nh x√°c. Sau ƒë√¢y l√† m·ªôt s·ªë v√≠ d·ª• ƒë·ªÉ tham kh·∫£o:
"aaaaxxaaaaannnnnccccccjjcccccoooooookkmmmmmmmm" ‚Üí "ƒÉn c∆°m"
"ddddxdooooccccccnnnlnnnaaayyyyyy" ‚Üí "ƒë·ªçc n√†y"
"xxxxxxjjjiiiiiiinnnnnnnnfkdcccccccchhhhhhaaaaaooooo" ‚Üí "xin ch√†o"
"ddddddjaiiiiiiiiiaaaaaaanmaaaaaannnnnnn" ‚Üí "ƒëi ƒÉn"

Ch·ªâ xu·∫•t ra c√¢u ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a, ƒë·∫£m b·∫£o ch√≠nh t·∫£, ng·ªØ ph√°p v√† d·∫•u c√¢u chu·∫©n x√°c.
V√≠ d·ª•: "Ttttrrrooooiioiimmmmmuuuuujfuuuuaaaaa," s·∫Ω tr·ªü th√†nh "Tr·ªùi m∆∞a!"

B√¢y gi·ªù, h√£y √°p d·ª•ng quy t·∫Øc n√†y ƒë·ªÉ ch·ªânh s·ª≠a vƒÉn b·∫£n sau: {text}"""

    def correct_text(self, text: str) -> tuple[str, float]:
        """
        Ch·ªânh s·ª≠a vƒÉn b·∫£n b·∫±ng Gemini API
        Args:
            text: VƒÉn b·∫£n c·∫ßn ch·ªânh s·ª≠a
        Returns:
            tuple: (k·∫øt qu·∫£ ch·ªânh s·ª≠a, th·ªùi gian ph·∫£n h·ªìi)
        """
        prompt = self.prompt_template.format(text=text)
        
        # ƒêo th·ªùi gian b·∫Øt ƒë·∫ßu
        start_time = time.time()
        
        try:
            # G·ªçi API
            response = self.model.generate_content(prompt)
            
            # ƒêo th·ªùi gian k·∫øt th√∫c
            end_time = time.time()
            response_time = end_time - start_time
            
            return response.text.strip(), response_time
            
        except Exception as e:
            end_time = time.time()
            response_time = end_time - start_time
            return f"L·ªói: {str(e)}", response_time

    def test_multiple_cases(self, test_cases: list[str]) -> None:
        """
        Test nhi·ªÅu tr∆∞·ªùng h·ª£p v√† hi·ªÉn th·ªã k·∫øt qu·∫£
        """
        print("=" * 80)
        print("üß™ GEMINI API SPEED TEST - KI·ªÇM TRA CH√çNH T·∫¢ TI·∫æNG VI·ªÜT")
        print("=" * 80)
        print(f"Model: {self.model.model_name}")
        print("-" * 80)
        
        total_time = 0
        successful_requests = 0
        
        for i, test_text in enumerate(test_cases, 1):
            print(f"\nüìù Test Case {i}:")
            print(f"Input:  '{test_text}'")
            
            result, response_time = self.correct_text(test_text)
            total_time += response_time
            
            if not result.startswith("L·ªói:"):
                successful_requests += 1
                status = "‚úÖ"
            else:
                status = "‚ùå"
            
            print(f"Output: '{result}' {status}")
            print(f"‚è±Ô∏è  Response Time: {response_time:.3f}s")
            print("-" * 40)
        
        # Th·ªëng k√™ t·ªïng k·∫øt
        print(f"\nüìä TH·ªêNG K√ä:")
        print(f"T·ªïng s·ªë test cases: {len(test_cases)}")
        print(f"Th√†nh c√¥ng: {successful_requests}")
        print(f"Th·∫•t b·∫°i: {len(test_cases) - successful_requests}")
        print(f"T·ªïng th·ªùi gian: {total_time:.3f}s")
        print(f"Th·ªùi gian trung b√¨nh: {total_time/len(test_cases):.3f}s/request")
        
        if successful_requests > 0:
            success_rate = (successful_requests / len(test_cases)) * 100
            print(f"T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%")


def main():
    """
    H√†m main ƒë·ªÉ ch·∫°y test
    """
    # Kh·ªüi t·∫°o spell checker
    try:
        # Thay ƒë·ªïi API_KEY ·ªü ƒë√¢y ho·∫∑c set bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY
        API_KEY = "AIzaSyBa0RIPexzkRmQU-hXizc54O0yypUyJCF8"
        
        spell_checker = GeminiSpellChecker(api_key=API_KEY)
        
        # C√°c test cases m·∫´u
        test_cases = [
            "xxxxxiiiinnnnnlllefglllllllooooooiiii",
            "ddddxdooooccccccnnnlnnnaaayyyyyy", 
            "aaaaaaaffnnnnnnnggggggoooooefoooooonnnnn",
            "xxxxxxiiiiinnnnncccchaaaaaoooo"
        ]
        
        # Ch·∫°y test
        spell_checker.test_multiple_cases(test_cases)
        
        print("\n" + "=" * 80)
        print("‚ú® Test ho√†n th√†nh! Ki·ªÉm tra k·∫øt qu·∫£ ·ªü tr√™n.")
        print("=" * 80)
        
    except ValueError as e:
        print(f"‚ùå L·ªói c·∫•u h√¨nh: {e}")
        print("\nüí° H∆∞·ªõng d·∫´n:")
        print("1. L·∫•y API key t·ª´ https://aistudio.google.com/app/apikey")
        print("2. Set bi·∫øn m√¥i tr∆∞·ªùng: export GEMINI_API_KEY='your_api_key'")
        print("3. Ho·∫∑c thay ƒë·ªïi bi·∫øn API_KEY trong code")
        
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")


if __name__ == "__main__":
    main()
