import asyncio
import websockets
import json
import base64
import cv2
import numpy as np
import torch
from ultralytics import YOLO
import time
import threading
import socket
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, StreamingResponse
from fastapi.staticfiles import StaticFiles
from typing import Optional, List, Dict, Any
import uvicorn
from contextlib import asynccontextmanager
import io

# ========== GLOBAL VARIABLES ==========
# WebSocket connection
websocket_client: Optional['YOLOWebSocketClient'] = None
detection_active = False
current_frame = None
current_annotated_frame = None  # Frame v·ªõi detection boxes
detection_results = []
current_fps = 0.0
client_thread = None

# Device setup
device = "cuda" if torch.cuda.is_available() else "mps" if torch.backends.mps.is_available() else "cpu"
print(f"üîß S·ª≠ d·ª•ng device: {device}")

# YOLO Model
yolo_model = YOLO('main_model_v2.pt')

# FPS Control
TARGET_FPS = 5
FRAME_INTERVAL = 1.0 / TARGET_FPS  # 0.2 seconds

def get_local_ip():
    """L·∫•y IP address ch√≠nh x√°c c·ªßa m√°y t√≠nh"""
    try:
        # T·∫°o socket ƒë·ªÉ connect ra ngo√†i (kh√¥ng th·ª±c s·ª± connect)
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
        return local_ip
    except Exception:
        # Fallback method
        hostname = socket.gethostname()
        return socket.gethostbyname(hostname)

def get_all_ip_addresses():
    """L·∫•y t·∫•t c·∫£ IP addresses c√≥ th·ªÉ d√πng"""
    import socket
    hostname = socket.gethostname()
    ip_list = []
    
    try:
        # Primary IP
        primary_ip = get_local_ip()
        ip_list.append(primary_ip)
        
        # Additional IPs
        for info in socket.getaddrinfo(hostname, None):
            ip = info[4][0]
            if ip not in ip_list and not ip.startswith('127.') and ':' not in ip:
                ip_list.append(ip)
                
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l·∫•y IP: {e}")
        ip_list = ["localhost"]
    
    return ip_list

class YOLOWebSocketClient:
    def __init__(self, server_url, model_path="main_model_v2.pt"):
        self.server_url = server_url
        self.model_path = model_path
        self.model = None
        self.websocket = None
        self.running = False
        self.reconnect_delay = 2
        self.connection_stable = False
        
        # Performance tracking
        self.frame_count = 0
        self.start_time = time.time()
        self.last_frame_time = 0
        
        # Load YOLO model
        self.load_model()
        
    def load_model(self):
        """Load YOLO model v·ªõi device optimization"""
        global yolo_model
        try:
            print(f"üîÑ ƒêang load model YOLO t·ª´ {self.model_path}...")
            self.model = YOLO(self.model_path)
            self.model.to(device)
            yolo_model = self.model
            print(f"‚úÖ Model loaded successfully on {device}!")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load model: {e}")
            print("üîÑ S·ª≠ d·ª•ng YOLOv8n m·∫∑c ƒë·ªãnh...")
            self.model = YOLO('yolov8n.pt')
            self.model.to(device)
            yolo_model = self.model
    
    def decode_frame(self, frame_base64):
        """Decode frame t·ª´ base64 v·ªõi error handling"""
        try:
            if not frame_base64:
                return None
                
            frame_bytes = base64.b64decode(frame_base64)
            if len(frame_bytes) == 0:
                print("‚ö†Ô∏è Frame bytes r·ªóng")
                return None
                
            nparr = np.frombuffer(frame_bytes, np.uint8)
            frame = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            frame = cv2.rotate(frame, cv2.ROTATE_90_COUNTERCLOCKWISE)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            if frame is None:
                print("‚ö†Ô∏è cv2.imdecode tr·∫£ v·ªÅ None")
                return None
                
            return frame
        except Exception as e:
            print(f"‚ùå L·ªói decode frame: {e}")
            return None
    
    def process_frame_yolo(self, frame):
        """X·ª≠ l√Ω frame b·∫±ng YOLO v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        global detection_results, current_annotated_frame
        try:
            # Ki·ªÉm tra frame h·ª£p l·ªá
            if frame is None or frame.size == 0:
                print("‚ö†Ô∏è Frame kh√¥ng h·ª£p l·ªá")
                return frame, []
            
            # YOLO inference
            results = self.model(frame, conf=0.5, device=device, verbose=False)
            
            # Extract detected objects - CH·ªà L·∫§Y T√äN OBJECT
            detected_objects = []
            if results[0].boxes is not None:
                for box in results[0].boxes:
                    cls = int(box.cls[0])
                    label = self.model.names[cls]
                    if label not in detected_objects:  # Tr√°nh duplicate
                        detected_objects.append(label)
            
            # Update global detection results
            detection_results = detected_objects
            
            # Create annotated frame - v·ªõi error handling
            try:
                annotated_frame = results[0].plot()
                current_annotated_frame = annotated_frame.copy()
            except Exception as plot_error:
                print(f"‚ö†Ô∏è L·ªói plot results: {plot_error}")
                annotated_frame = frame.copy()
                current_annotated_frame = frame.copy()
            
            return annotated_frame, detected_objects
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω YOLO: {e}")
            return frame, []
    
    async def request_frame(self):
        """Request frame t·ª´ server v·ªõi timeout optimization"""
        try:
            if not self.websocket:
                return None
                
            request = {"action": "get_frame"}
            await self.websocket.send(json.dumps(request))
            
            # Timeout ng·∫Øn h∆°n ƒë·ªÉ responsive h∆°n
            response = await asyncio.wait_for(self.websocket.recv(), timeout=3.0)
            data = json.loads(response)
            
            if data.get("status") == "success":
                return data.get("data")
            return None
                
        except asyncio.TimeoutError:
            # Kh√¥ng log qu√° nhi·ªÅu timeout ƒë·ªÉ tr√°nh spam
            return None
        except websockets.exceptions.ConnectionClosed:
            print("üì° K·∫øt n·ªëi b·ªã ƒë√≥ng")
            self.connection_stable = False
            return None
        except Exception as e:
            print(f"‚ùå L·ªói request frame: {e}")
            return None
    
    async def connect_with_retry(self):
        """K·∫øt n·ªëi v·ªõi exponential backoff"""
        retry_count = 0
        max_retries = 10
        
        while retry_count < max_retries and self.running:
            try:
                print(f"üîÑ K·∫øt n·ªëi t·ªõi server: {self.server_url} (l·∫ßn {retry_count + 1})")
                
                self.websocket = await asyncio.wait_for(
                    websockets.connect(
                        self.server_url,
                        ping_interval=15,
                        ping_timeout=8,
                        close_timeout=5,
                        max_size=10**7,  # 10MB ƒë·ªÉ handle large frames
                    ), 
                    timeout=8.0
                )
                
                print("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng!")
                self.connection_stable = True
                return True
                
            except Exception as e:
                retry_count += 1
                print(f"‚ùå L·ªói k·∫øt n·ªëi (l·∫ßn {retry_count}): {e}")
                
                if retry_count < max_retries:
                    await asyncio.sleep(self.reconnect_delay)
                    self.reconnect_delay = min(self.reconnect_delay * 1.2, 8)  # Exponential backoff
        
        return False
    
    async def run_client(self):
        """Main client loop v·ªõi FPS control - KH√îNG D√ôNG cv2.imshow()"""
        global detection_active, current_frame, current_fps
        
        self.running = True
        
        while self.running:
            # K·∫øt n·ªëi ho·∫∑c reconnect
            if not await self.connect_with_retry():
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server")
                break
            
            try:
                self.reconnect_delay = 2  # Reset delay
                
                while self.running and self.connection_stable:
                    current_time = time.time()
                    
                    # FPS Control - ch·ªâ process frame theo interval
                    if current_time - self.last_frame_time >= FRAME_INTERVAL:
                        # Request frame t·ª´ server
                        frame_base64 = await self.request_frame()
                        
                        if frame_base64:
                            # Decode frame
                            frame = self.decode_frame(frame_base64)
                            
                            if frame is not None:
                                # Update current frame cho API
                                current_frame = frame.copy()
                                
                                # X·ª≠ l√Ω YOLO n·∫øu detection active
                                if detection_active:
                                    processed_frame, objects = self.process_frame_yolo(frame)
                                    
                                    # Log detection results thay v√¨ hi·ªÉn th·ªã
                                    if objects:
                                        print(f"üéØ Detected: {', '.join(objects)}")
                                    
                                    # T√≠nh FPS
                                    self.frame_count += 1
                                    elapsed_time = current_time - self.start_time
                                    if elapsed_time >= 1.0:
                                        current_fps = self.frame_count / elapsed_time
                                        self.frame_count = 0
                                        self.start_time = current_time
                                        print(f"üìä Detection FPS: {current_fps:.2f}")
                                
                                self.last_frame_time = current_time
                        else:
                            # Kh√¥ng c√≥ frame - c√≥ th·ªÉ server busy
                            await asyncio.sleep(0.1)
                    else:
                        # Ch·ªù ƒë·ªÉ maintain FPS
                        await asyncio.sleep(0.05)
                    
            except websockets.exceptions.ConnectionClosed:
                print("üì° K·∫øt n·ªëi b·ªã ƒë√≥ng b·ªüi server")
                self.connection_stable = False
                if self.websocket:
                    self.websocket = None
                    
            except Exception as e:
                print(f"‚ùå L·ªói client: {e}")
                self.connection_stable = False
                if self.websocket:
                    self.websocket = None
        
        # Cleanup - KH√îNG C·∫¶N cv2.destroyAllWindows()
        if self.websocket:
            await self.websocket.close()
        print("üõë WebSocket Client ƒë√£ d·ª´ng")
    
    def start_client(self):
        """Kh·ªüi ƒë·ªông client trong thread ri√™ng"""
        try:
            asyncio.run(self.run_client())
        except KeyboardInterrupt:
            print("\nüõë D·ª´ng client...")
            self.running = False

# ========== FASTAPI SERVER ==========
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Kh·ªüi t·∫°o v√† cleanup khi start/stop server"""
    global websocket_client, client_thread
    
    # Startup
    print("üöÄ Kh·ªüi t·∫°o WebSocket Client...")
    SERVER_IP = "172.20.10.3"  # IP c·ªßa Raspberry Pi
    SERVER_PORT = 8765
    SERVER_URL = f"ws://{SERVER_IP}:{SERVER_PORT}"
    
    websocket_client = YOLOWebSocketClient(SERVER_URL)
    
    # Ch·∫°y client trong thread ri√™ng
    client_thread = threading.Thread(target=websocket_client.start_client)
    client_thread.daemon = True
    client_thread.start()
    
    # ƒê·ª£i client connect
    await asyncio.sleep(2)
    
    yield
    
    # Cleanup
    print("üõë ƒêang d·ª´ng WebSocket Client...")
    if websocket_client:
        websocket_client.running = False

app = FastAPI(lifespan=lifespan, title="YOLO Detection API", version="1.0.0")

# ========== WEB STREAMING ENDPOINTS ==========

@app.get("/", response_class=HTMLResponse)
async def get_web_viewer():
    """Trang web ƒë·ªÉ xem video stream"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>YOLO Detection Stream</title>
        <meta charset="utf-8">
        <style>
            body { 
                font-family: Arial, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: #f0f0f0;
            }
            .container { 
                max-width: 1200px; 
                margin: 0 auto; 
                background: white; 
                padding: 20px; 
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .header { 
                text-align: center; 
                margin-bottom: 20px; 
            }
            .video-container { 
                text-align: center; 
                margin: 20px 0; 
            }
            .video-stream { 
                max-width: 100%; 
                border: 2px solid #333; 
                border-radius: 10px;
            }
            .controls { 
                text-align: center; 
                margin: 20px 0; 
            }
            .btn { 
                padding: 10px 20px; 
                margin: 5px; 
                border: none; 
                border-radius: 5px; 
                cursor: pointer; 
                font-size: 16px;
            }
            .btn-start { background: #4CAF50; color: white; }
            .btn-stop { background: #f44336; color: white; }
            .btn-refresh { background: #2196F3; color: white; }
            .status { 
                margin: 20px 0; 
                padding: 15px; 
                border-radius: 5px;
                background: #e8f5e8;
                border: 1px solid #4CAF50;
            }
            .objects { 
                margin: 10px 0; 
                padding: 10px; 
                background: #f9f9f9; 
                border-radius: 5px;
            }
            .object-tag { 
                display: inline-block; 
                background: #2196F3; 
                color: white; 
                padding: 5px 10px; 
                margin: 2px; 
                border-radius: 15px; 
                font-size: 14px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéØ YOLO Detection Video Stream</h1>
                <p>Real-time object detection t·ª´ Raspberry Pi camera</p>
            </div>
            
            <div class="video-container">
                <img id="videoStream" class="video-stream" src="/video_feed" alt="Video Stream">
            </div>
            
            <div class="controls">
                <button class="btn btn-start" onclick="startDetection()">üéØ B·∫Øt ƒë·∫ßu Detection</button>
                <button class="btn btn-stop" onclick="stopDetection()">üõë D·ª´ng Detection</button>
                <button class="btn btn-refresh" onclick="refreshStatus()">üîÑ Refresh Status</button>
            </div>
            
            <div id="status" class="status">
                <h3>üìä Tr·∫°ng th√°i:</h3>
                <div id="statusContent">Loading...</div>
            </div>
            
            <div class="objects">
                <h3>üéØ Detected Objects:</h3>
                <div id="detectedObjects">No objects detected</div>
            </div>
        </div>

        <script>
            let detectionActive = false;
            
            async function startDetection() {
                try {
                    const response = await fetch('/detect', { method: 'POST' });
                    const data = await response.json();
                    detectionActive = true;
                    updateStatus();
                    alert('‚úÖ Detection started!');
                } catch (error) {
                    alert('‚ùå Error starting detection: ' + error);
                }
            }
            
            async function stopDetection() {
                try {
                    const response = await fetch('/stop', { method: 'POST' });
                    const data = await response.json();
                    detectionActive = false;
                    updateStatus();
                    alert('üõë Detection stopped!');
                } catch (error) {
                    alert('‚ùå Error stopping detection: ' + error);
                }
            }
            
            async function updateStatus() {
                try {
                    const response = await fetch('/status');
                    const data = await response.json();
                    
                    document.getElementById('statusContent').innerHTML = `
                        <p><strong>Active:</strong> ${data.active ? '‚úÖ Yes' : '‚ùå No'}</p>
                        <p><strong>FPS:</strong> ${data.fps}</p>
                        <p><strong>Device:</strong> ${data.device}</p>
                        <p><strong>Connection:</strong> ${data.connection_stable ? '‚úÖ Stable' : '‚ùå Unstable'}</p>
                    `;
                    
                    const objectsDiv = document.getElementById('detectedObjects');
                    if (data.objects && data.objects.length > 0) {
                        objectsDiv.innerHTML = data.objects.map(obj => 
                            `<span class="object-tag">${obj}</span>`
                        ).join('');
                    } else {
                        objectsDiv.innerHTML = 'No objects detected';
                    }
                } catch (error) {
                    console.error('Error updating status:', error);
                }
            }
            
            function refreshStatus() {
                updateStatus();
                // Refresh video stream
                const img = document.getElementById('videoStream');
                img.src = img.src.split('?')[0] + '?t=' + new Date().getTime();
            }
            
            // Auto-refresh status every 2 seconds
            setInterval(updateStatus, 2000);
            
            // Initial status load
            updateStatus();
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

def generate_frames():
    """Generator ƒë·ªÉ stream video frames"""
    global current_frame, current_annotated_frame, detection_active
    
    while True:
        try:
            # Ch·ªçn frame ƒë·ªÉ stream
            if detection_active and current_annotated_frame is not None:
                frame = current_annotated_frame.copy()
            elif current_frame is not None:
                frame = current_frame.copy()
            else:
                # T·∫°o frame placeholder
                frame = np.zeros((480, 640, 3), dtype=np.uint8)
                cv2.putText(frame, 'No Video Feed', (200, 240), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            
            # Encode frame to JPEG
            ret, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 85])
            
            if ret:
                frame_bytes = buffer.tobytes()
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
            
            time.sleep(0.1)  # Limit streaming FPS
            
        except Exception as e:
            print(f"‚ùå L·ªói generate frame: {e}")
            time.sleep(0.5)

@app.get("/video_feed")
async def video_feed():
    """MJPEG video stream endpoint"""
    return StreamingResponse(
        generate_frames(),
        media_type="multipart/x-mixed-replace; boundary=frame"
    )

# ========== EXISTING API ENDPOINTS ==========
@app.post("/detect")
async def start_detection():
    """B·∫Øt ƒë·∫ßu YOLO detection"""
    global detection_active
    
    try:
        if not websocket_client or not websocket_client.connection_stable:
            raise HTTPException(status_code=503, detail="WebSocket connection not available")
        
        detection_active = True
        
        # ƒê·ª£i m·ªôt frame ƒë·ªÉ c√≥ k·∫øt qu·∫£
        await asyncio.sleep(0.5)
        
        return {
            "status": "detecting",
            "objects": detection_results,
            "fps": round(current_fps, 1),
            "device": device,
            "target_fps": TARGET_FPS,
            "connection_stable": websocket_client.connection_stable
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stop")
async def stop_detection():
    """D·ª´ng YOLO detection"""
    global detection_active, detection_results, current_fps
    
    try:
        detection_active = False
        detection_results = []
        current_fps = 0.0
        
        return {
            "status": "stopped",
            "message": "Detection stopped successfully"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/status")
async def get_status():
    """L·∫•y tr·∫°ng th√°i detection hi·ªán t·∫°i"""
    connection_status = websocket_client.connection_stable if websocket_client else False
    
    return {
        "active": detection_active,
        "objects": detection_results if detection_active else [],
        "fps": round(current_fps, 1),
        "device": device,
        "target_fps": TARGET_FPS,
        "connection_stable": connection_status,
        "websocket_url": websocket_client.server_url if websocket_client else None
    }

@app.get("/test")
async def test_connection():
    """Test k·∫øt n·ªëi v√† h·ªá th·ªëng"""
    return {
        "status": "connected",
        "device": device,
        "cuda_available": torch.cuda.is_available(),
        "mps_available": torch.backends.mps.is_available(),
        "target_fps": TARGET_FPS,
        "model_loaded": yolo_model is not None,
        "websocket_stable": websocket_client.connection_stable if websocket_client else False
    }

@app.get("/frame")
async def get_current_frame():
    """L·∫•y frame hi·ªán t·∫°i (base64)"""
    global current_frame
    
    if current_frame is None:
        raise HTTPException(status_code=404, detail="No frame available")
    
    try:
        # Encode frame to base64
        _, buffer = cv2.imencode('.jpg', current_frame)
        frame_base64 = base64.b64encode(buffer).decode('utf-8')
        
        return {
            "status": "success",
            "frame": frame_base64,
            "timestamp": time.time()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ========== MAIN ==========
if __name__ == "__main__":
    print(f"\n{'='*60}")
    print(f"üéØ YOLO DETECTION CLIENT & WEB STREAMING API")
    print(f"{'='*60}")
    print(f"üîß PyTorch: {torch.__version__}")
    print(f"üîß Device: {device}")
    print(f"üîß Target FPS: {TARGET_FPS}")
    print(f"üîß YOLO Model: main_model_v2.pt")
    
    # L·∫•y IP addresses
    primary_ip = get_local_ip()
    all_ips = get_all_ip_addresses()
    
    print(f"\n{'üåê NETWORK INFORMATION':^60}")
    print(f"{'='*60}")
    print(f"üì° Primary IP: {primary_ip}")
    
    if len(all_ips) > 1:
        print(f"üì° Alternative IPs:")
        for ip in all_ips[1:]:
            print(f"   ‚Ä¢ {ip}")
    
    print(f"\n{'üåê WEB VIDEO STREAMING':^60}")
    print(f"{'='*60}")
    print(f"üîó Web Viewer: http://{primary_ip}:8000")
    print(f"üì∫ Video Stream: http://{primary_ip}:8000/video_feed")
    print(f"üéÆ M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p link tr√™n ƒë·ªÉ xem video!")
    
    print(f"\n{'üì± API ENDPOINTS':^60}")
    print(f"{'='*60}")
    print(f"üìã API Endpoints:")
    print(f"   ‚Ä¢ POST /detect  - B·∫Øt ƒë·∫ßu detection")
    print(f"   ‚Ä¢ POST /stop    - D·ª´ng detection") 
    print(f"   ‚Ä¢ GET /status   - Xem tr·∫°ng th√°i")
    print(f"   ‚Ä¢ GET /test     - Test connection")
    print(f"   ‚Ä¢ GET /frame    - L·∫•y frame hi·ªán t·∫°i")
    
    print(f"\n{'ü§ñ RASPBERRY PI CONNECTION':^60}")
    print(f"{'='*60}")
    print(f"üîó WebSocket s·∫Ω k·∫øt n·ªëi t·ªõi: ws://172.20.10.3:8765")
    print(f"üì∑ Nh·∫≠n video stream t·ª´ PiCamera2")
    
    print(f"\n{'üöÄ STARTING SERVER':^60}")
    print(f"{'='*60}")
    print(f"‚è≥ Kh·ªüi ƒë·ªông Web Streaming Server tr√™n c·ªïng 8000...")
    print(f"üìù Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server")
    print(f"{'='*60}\n")
    
    # Ch·∫°y FastAPI server
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
