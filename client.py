import asyncio
import websockets
import json
import base64
import cv2
import numpy as np
import torch
from ultralytics import YOLO
import time
import threading
import socket
from fastapi import FastAPI, HTTPException
from typing import Optional, List, Dict, Any
import uvicorn
from contextlib import asynccontextmanager

# ========== GLOBAL VARIABLES ==========
# WebSocket connection
websocket_client: Optional['YOLOWebSocketClient'] = None
detection_active = False
current_frame = None
detection_results = []
current_fps = 0.0
client_thread = None

# Device setup
device = "cuda" if torch.cuda.is_available() else "mps" if torch.backends.mps.is_available() else "cpu"
print(f"üîß S·ª≠ d·ª•ng device: {device}")

# YOLO Model
yolo_model = None

# FPS Control
TARGET_FPS = 5
FRAME_INTERVAL = 1.0 / TARGET_FPS  # 0.2 seconds

class YOLOWebSocketClient:
    def __init__(self, server_url, model_path="main_model_v2.pt"):
        self.server_url = server_url
        self.model_path = model_path
        self.model = None
        self.websocket = None
        self.running = False
        self.reconnect_delay = 2
        self.connection_stable = False
        
        # Performance tracking
        self.frame_count = 0
        self.start_time = time.time()
        self.last_frame_time = 0
        
        # Load YOLO model
        self.load_model()
        
    def load_model(self):
        """Load YOLO model v·ªõi device optimization"""
        global yolo_model
        try:
            print(f"üîÑ ƒêang load model YOLO t·ª´ {self.model_path}...")
            self.model = YOLO(self.model_path)
            self.model.to(device)
            yolo_model = self.model
            print(f"‚úÖ Model loaded successfully on {device}!")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load model: {e}")
            print("üîÑ S·ª≠ d·ª•ng YOLOv8n m·∫∑c ƒë·ªãnh...")
            self.model = YOLO('yolov8n.pt')
            self.model.to(device)
            yolo_model = self.model
    
    def decode_frame(self, frame_base64):
        """Decode frame t·ª´ base64 v·ªõi error handling"""
        try:
            frame_bytes = base64.b64decode(frame_base64)
            nparr = np.frombuffer(frame_bytes, np.uint8)
            frame = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            return frame
        except Exception as e:
            print(f"‚ùå L·ªói decode frame: {e}")
            return None
    
    def process_frame_yolo(self, frame):
        """X·ª≠ l√Ω frame b·∫±ng YOLO v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        global detection_results
        try:
            # YOLO inference
            results = self.model(frame, conf=0.5, device=device, verbose=False)
            
            # Extract detected objects - CH·ªà L·∫§Y T√äN OBJECT
            detected_objects = []
            if results[0].boxes is not None:
                for box in results[0].boxes:
                    cls = int(box.cls[0])
                    label = self.model.names[cls]
                    if label not in detected_objects:  # Tr√°nh duplicate
                        detected_objects.append(label)
            
            # Update global detection results
            detection_results = detected_objects
            
            # Create annotated frame
            annotated_frame = results[0].plot()
            
            return annotated_frame, detected_objects
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω YOLO: {e}")
            return frame, []
    
    async def request_frame(self):
        """Request frame t·ª´ server v·ªõi timeout optimization"""
        try:
            if not self.websocket:
                return None
                
            request = {"action": "get_frame"}
            await self.websocket.send(json.dumps(request))
            
            # Timeout ng·∫Øn h∆°n ƒë·ªÉ responsive h∆°n
            response = await asyncio.wait_for(self.websocket.recv(), timeout=3.0)
            data = json.loads(response)
            
            if data.get("status") == "success":
                return data.get("data")
            return None
                
        except asyncio.TimeoutError:
            # Kh√¥ng log qu√° nhi·ªÅu timeout ƒë·ªÉ tr√°nh spam
            return None
        except websockets.exceptions.ConnectionClosed:
            print("üì° K·∫øt n·ªëi b·ªã ƒë√≥ng")
            self.connection_stable = False
            return None
        except Exception as e:
            print(f"‚ùå L·ªói request frame: {e}")
            return None
    
    async def connect_with_retry(self):
        """K·∫øt n·ªëi v·ªõi exponential backoff"""
        retry_count = 0
        max_retries = 10
        
        while retry_count < max_retries and self.running:
            try:
                print(f"üîÑ K·∫øt n·ªëi t·ªõi server: {self.server_url} (l·∫ßn {retry_count + 1})")
                
                self.websocket = await asyncio.wait_for(
                    websockets.connect(
                        self.server_url,
                        ping_interval=15,
                        ping_timeout=8,
                        close_timeout=5,
                        max_size=10**7,  # 10MB ƒë·ªÉ handle large frames
                        read_limit=10**7
                    ), 
                    timeout=8.0
                )
                
                print("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng!")
                self.connection_stable = True
                return True
                
            except Exception as e:
                retry_count += 1
                print(f"‚ùå L·ªói k·∫øt n·ªëi (l·∫ßn {retry_count}): {e}")
                
                if retry_count < max_retries:
                    await asyncio.sleep(self.reconnect_delay)
                    self.reconnect_delay = min(self.reconnect_delay * 1.2, 8)  # Exponential backoff
        
        return False
    
    async def run_client(self):
        """Main client loop v·ªõi FPS control"""
        global detection_active, current_frame, current_fps
        
        self.running = True
        
        while self.running:
            # K·∫øt n·ªëi ho·∫∑c reconnect
            if not await self.connect_with_retry():
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server")
                break
            
            try:
                self.reconnect_delay = 2  # Reset delay
                
                while self.running and self.connection_stable:
                    current_time = time.time()
                    
                    # FPS Control - ch·ªâ process frame theo interval
                    if current_time - self.last_frame_time >= FRAME_INTERVAL:
                        # Request frame t·ª´ server
                        frame_base64 = await self.request_frame()
                        
                        if frame_base64:
                            # Decode frame
                            frame = self.decode_frame(frame_base64)
                            
                            if frame is not None:
                                # Update current frame cho API
                                current_frame = frame.copy()
                                
                                # X·ª≠ l√Ω YOLO n·∫øu detection active
                                if detection_active:
                                    processed_frame, objects = self.process_frame_yolo(frame)
                                    
                                    # Hi·ªÉn th·ªã frame (optional - c√≥ th·ªÉ t·∫Øt ƒë·ªÉ ti·∫øt ki·ªám resources)
                                    cv2.imshow('YOLO Detection - Press Q to quit', processed_frame)
                                    
                                    # T√≠nh FPS
                                    self.frame_count += 1
                                    elapsed_time = current_time - self.start_time
                                    if elapsed_time >= 1.0:
                                        current_fps = self.frame_count / elapsed_time
                                        self.frame_count = 0
                                        self.start_time = current_time
                                        print(f"üìä Detection FPS: {current_fps:.2f}")
                                
                                self.last_frame_time = current_time
                                
                                # Check for quit key
                                if cv2.waitKey(1) & 0xFF == ord('q'):
                                    self.running = False
                                    break
                        else:
                            # Kh√¥ng c√≥ frame - c√≥ th·ªÉ server busy
                            await asyncio.sleep(0.1)
                    else:
                        # Ch·ªù ƒë·ªÉ maintain FPS
                        await asyncio.sleep(0.05)
                    
            except websockets.exceptions.ConnectionClosed:
                print("üì° K·∫øt n·ªëi b·ªã ƒë√≥ng b·ªüi server")
                self.connection_stable = False
                if self.websocket:
                    self.websocket = None
                    
            except Exception as e:
                print(f"‚ùå L·ªói client: {e}")
                self.connection_stable = False
                if self.websocket:
                    self.websocket = None
        
        # Cleanup
        if self.websocket:
            await self.websocket.close()
        cv2.destroyAllWindows()
        print("üõë WebSocket Client ƒë√£ d·ª´ng")
    
    def start_client(self):
        """Kh·ªüi ƒë·ªông client trong thread ri√™ng"""
        try:
            asyncio.run(self.run_client())
        except KeyboardInterrupt:
            print("\nüõë D·ª´ng client...")
            self.running = False

# ========== FASTAPI SERVER ==========
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Kh·ªüi t·∫°o v√† cleanup khi start/stop server"""
    global websocket_client, client_thread
    
    # Startup
    print("üöÄ Kh·ªüi t·∫°o WebSocket Client...")
    SERVER_IP = "192.168.137.19"  # IP c·ªßa Raspberry Pi
    SERVER_PORT = 8765
    SERVER_URL = f"ws://{SERVER_IP}:{SERVER_PORT}"
    
    websocket_client = YOLOWebSocketClient(SERVER_URL)
    
    # Ch·∫°y client trong thread ri√™ng
    client_thread = threading.Thread(target=websocket_client.start_client)
    client_thread.daemon = True
    client_thread.start()
    
    # ƒê·ª£i client connect
    await asyncio.sleep(2)
    
    yield
    
    # Cleanup
    print("üõë ƒêang d·ª´ng WebSocket Client...")
    if websocket_client:
        websocket_client.running = False

app = FastAPI(lifespan=lifespan, title="YOLO Detection API", version="1.0.0")

# ========== API ENDPOINTS ==========
@app.post("/detect")
async def start_detection():
    """B·∫Øt ƒë·∫ßu YOLO detection"""
    global detection_active
    
    try:
        if not websocket_client or not websocket_client.connection_stable:
            raise HTTPException(status_code=503, detail="WebSocket connection not available")
        
        detection_active = True
        
        # ƒê·ª£i m·ªôt frame ƒë·ªÉ c√≥ k·∫øt qu·∫£
        await asyncio.sleep(0.5)
        
        return {
            "status": "detecting",
            "objects": detection_results,
            "fps": round(current_fps, 1),
            "device": device,
            "target_fps": TARGET_FPS,
            "connection_stable": websocket_client.connection_stable
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stop")
async def stop_detection():
    """D·ª´ng YOLO detection"""
    global detection_active, detection_results, current_fps
    
    try:
        detection_active = False
        detection_results = []
        current_fps = 0.0
        
        return {
            "status": "stopped",
            "message": "Detection stopped successfully"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/status")
async def get_status():
    """L·∫•y tr·∫°ng th√°i detection hi·ªán t·∫°i"""
    connection_status = websocket_client.connection_stable if websocket_client else False
    
    return {
        "active": detection_active,
        "objects": detection_results if detection_active else [],
        "fps": round(current_fps, 1),
        "device": device,
        "target_fps": TARGET_FPS,
        "connection_stable": connection_status,
        "websocket_url": websocket_client.server_url if websocket_client else None
    }

@app.get("/test")
async def test_connection():
    """Test k·∫øt n·ªëi v√† h·ªá th·ªëng"""
    return {
        "status": "connected",
        "device": device,
        "cuda_available": torch.cuda.is_available(),
        "mps_available": torch.backends.mps.is_available(),
        "target_fps": TARGET_FPS,
        "model_loaded": yolo_model is not None,
        "websocket_stable": websocket_client.connection_stable if websocket_client else False
    }

@app.get("/frame")
async def get_current_frame():
    """L·∫•y frame hi·ªán t·∫°i (base64)"""
    global current_frame
    
    if current_frame is None:
        raise HTTPException(status_code=404, detail="No frame available")
    
    try:
        # Encode frame to base64
        _, buffer = cv2.imencode('.jpg', current_frame)
        frame_base64 = base64.b64encode(buffer).decode('utf-8')
        
        return {
            "status": "success",
            "frame": frame_base64,
            "timestamp": time.time()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ========== MAIN ==========
if __name__ == "__main__":
    print(f"\nüéØ YOLO Detection Client & API Server")
    print(f"üîß PyTorch: {torch.__version__}")
    print(f"üîß Device: {device}")
    print(f"üîß Target FPS: {TARGET_FPS}")
    
    # L·∫•y IP address
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)
    
    print(f"\nüì° API Server: http://{local_ip}:8000")
    print("üìã Endpoints cho Mobile App:")
    print("  POST /detect  - B·∫Øt ƒë·∫ßu detection")
    print("  POST /stop    - D·ª´ng detection") 
    print("  GET /status   - Xem tr·∫°ng th√°i")
    print("  GET /test     - Test connection")
    print("  GET /frame    - L·∫•y frame hi·ªán t·∫°i")
    print("\nüîó WebSocket s·∫Ω k·∫øt n·ªëi t·ªõi Raspberry Pi...")
    
    # Ch·∫°y FastAPI server
    uvicorn.run(app, host="0.0.0.0", port=8000)
